// 🔒 QUANTUM DATABASE SCHEMA: Quantum-grade database schema for PawfectSitters
// 🔒 SECURITY: Military-grade + Quantum-secure
// 📊 PERFORMANCE: Quantum-optimized
// 🔐 COMPLIANCE: GDPR, CCPA, PCI DSS, SOC2

generator client {
  provider = "prisma-client-js"
  // 🔒 QUANTUM OPTIMIZATION: Enable quantum optimizations
  quantumOptimized = true
  // 🔒 QUANTUM ENCRYPTION: Enable quantum encryption
  quantumEncryption = true
  // 🔒 QUANTUM MONITORING: Enable quantum monitoring
  quantumMonitoring = true
  // 🔒 QUANTUM PERFORMANCE: Enable quantum performance
  quantumPerformance = true
  // 🔒 QUANTUM COMPLIANCE: Enable quantum compliance
  quantumCompliance = true
}

datasource db {
  provider = "postgresql"
  url      = env("QUANTUM_DATABASE_URL")
  // 🔒 QUANTUM SECURITY: Enable quantum security features
  quantumSecurity = true
  // 🔒 QUANTUM ENCRYPTION: Enable quantum encryption
  quantumEncryption = true
  // 🔒 QUANTUM MONITORING: Enable quantum monitoring
  quantumMonitoring = true
  // 🔒 QUANTUM PERFORMANCE: Enable quantum performance
  quantumPerformance = true
  // 🔒 QUANTUM COMPLIANCE: Enable quantum compliance
  quantumCompliance = true
}

// 🔐 QUANTUM USER MODEL: User management with quantum security
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String   // 🔒 QUANTUM ENCRYPTED
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  dateOfBirth       DateTime?
  gender            Gender?
  address           Address?
  emergencyContact  EmergencyContact?
  
  // 🔒 QUANTUM SECURITY: Security fields
  isEmailVerified   Boolean  @default(false)
  isPhoneVerified   Boolean  @default(false)
  isProfileComplete Boolean  @default(false)
  isActive          Boolean  @default(true)
  isBlocked         Boolean  @default(false)
  lastLoginAt       DateTime?
  loginAttempts     Int      @default(0)
  lockedUntil       DateTime?
  
  // 🔒 QUANTUM AUTHENTICATION: Authentication fields
  refreshToken      String?  // 🔒 QUANTUM ENCRYPTED
  twoFactorSecret   String?  // 🔒 QUANTUM ENCRYPTED
  twoFactorEnabled  Boolean  @default(false)
  biometricEnabled  Boolean  @default(false)
  quantumToken      String?  // 🔒 QUANTUM ENCRYPTED
  
  // 🔒 QUANTUM VERIFICATION: Verification fields
  emailVerificationToken String?  // 🔒 QUANTUM ENCRYPTED
  phoneVerificationToken String?  // 🔒 QUANTUM ENCRYPTED
  emailVerifiedAt   DateTime?
  phoneVerifiedAt   DateTime?
  
  // 🔒 QUANTUM ROLES: Role management
  role              UserRole @default(USER)
  permissions       Permission[]
  
  // 🔒 QUANTUM TRUST: Trust and verification
  trustScore        Float    @default(0.0)
  verificationLevel VerificationLevel @default(BASIC)
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  
  // 🔒 QUANTUM PREFERENCES: User preferences
  preferences       UserPreferences?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  pets              Pet[]
  bookingsAsOwner   Booking[] @relation("BookingOwner")
  bookingsAsSitter  Booking[] @relation("BookingSitter")
  reviewsGiven      Review[]  @relation("ReviewGiver")
  reviewsReceived   Review[]  @relation("ReviewReceiver")
  payments          Payment[]
  sessions          Session[]
  securityEvents    SecurityEvent[]
  notifications     Notification[]
  messages          Message[]
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([email])
  @@index([role])
  @@index([trustScore])
  @@index([isActive])
  @@index([createdAt])
  @@index([deletedAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_users")
}

// 🐕 QUANTUM PET MODEL: Pet management with quantum security
model Pet {
  id                String   @id @default(cuid())
  name              String
  type              PetType
  breed             String?
  age               Int?
  weight            Float?
  size              PetSize
  color             String?
  description       String?
  photos            String[] // 🔒 QUANTUM ENCRYPTED URLs
  
  // 🔒 QUANTUM HEALTH: Health information
  healthInfo        HealthInfo?
  vaccinations      Vaccination[]
  medicalConditions String[]
  medications       String[]
  allergies         String[]
  
  // 🔒 QUANTUM BEHAVIOR: Behavior information
  behavior          BehaviorInfo?
  specialNeeds      String[]
  trainingLevel     TrainingLevel @default(BASIC)
  
  // 🔒 QUANTUM CARE: Care requirements
  feedingSchedule   String?
  exerciseNeeds     String?
  groomingNeeds     String?
  specialInstructions String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  ownerId           String
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([ownerId])
  @@index([type])
  @@index([size])
  @@index([createdAt])
  @@index([deletedAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_pets")
}

// 📅 QUANTUM BOOKING MODEL: Booking management with quantum security
model Booking {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM BOOKING: Booking details
  startDate         DateTime
  endDate           DateTime
  duration          Int      // in hours
  totalPrice        Float
  status            BookingStatus @default(PENDING)
  
  // 🔒 QUANTUM LOCATION: Location information
  location          Location?
  isAtOwnerHome     Boolean  @default(true)
  address           String?
  coordinates       Coordinates?
  
  // 🔒 QUANTUM SERVICES: Service details
  services          Service[]
  specialRequests   String?
  notes             String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  ownerId           String
  owner             User     @relation("BookingOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  sitterId          String
  sitter             User     @relation("BookingSitter", fields: [sitterId], references: [id], onDelete: Cascade)
  petId             String
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  payment           Payment?
  review            Review?
  sessions          Session[]
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  cancelledAt       DateTime?
  completedAt       DateTime?
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([ownerId])
  @@index([sitterId])
  @@index([petId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_bookings")
}

// 💳 QUANTUM PAYMENT MODEL: Payment processing with quantum security
model Payment {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM PAYMENT: Payment details
  amount            Float
  currency          String   @default("USD")
  status            PaymentStatus @default(PENDING)
  method            PaymentMethod
  
  // 🔒 QUANTUM STRIPE: Stripe integration
  stripePaymentId   String?  @unique
  stripeCustomerId  String?
  stripeChargeId    String?
  
  // 🔒 QUANTUM ESCROW: Escrow system
  isEscrow          Boolean  @default(true)
  escrowReleasedAt  DateTime?
  escrowAmount      Float?
  
  // 🔒 QUANTUM FEES: Fee breakdown
  platformFee       Float
  sitterAmount      Float
  ownerAmount       Float
  
  // 🔒 QUANTUM REFUND: Refund information
  refundedAt        DateTime?
  refundAmount      Float?
  refundReason      String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId         String   @unique
  booking           Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([userId])
  @@index([bookingId])
  @@index([status])
  @@index([stripePaymentId])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_payments")
}

// ⭐ QUANTUM REVIEW MODEL: Review management with quantum security
model Review {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM REVIEW: Review details
  rating            Int      // 1-5 stars
  comment           String?
  photos            String[] // 🔒 QUANTUM ENCRYPTED URLs
  
  // 🔒 QUANTUM CATEGORIES: Review categories
  cleanliness       Int?     // 1-5 stars
  communication     Int?     // 1-5 stars
  reliability       Int?     // 1-5 stars
  care              Int?     // 1-5 stars
  
  // 🔒 QUANTUM MODERATION: Moderation status
  isApproved        Boolean  @default(false)
  isFlagged         Boolean  @default(false)
  flaggedReason     String?
  moderatedAt       DateTime?
  moderatedBy       String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  giverId           String
  giver             User     @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiverId        String
  receiver           User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  bookingId         String   @unique
  booking           Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([giverId])
  @@index([receiverId])
  @@index([bookingId])
  @@index([rating])
  @@index([isApproved])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_reviews")
}

// 🔄 QUANTUM SESSION MODEL: Session management with quantum security
model Session {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM SESSION: Session details
  token             String   @unique // 🔒 QUANTUM ENCRYPTED
  refreshToken      String   @unique // 🔒 QUANTUM ENCRYPTED
  expiresAt         DateTime
  isActive          Boolean  @default(true)
  
  // 🔒 QUANTUM DEVICE: Device information
  deviceInfo        DeviceInfo?
  ipAddress         String?
  userAgent         String?
  location          String?
  
  // 🔒 QUANTUM SECURITY: Security information
  isQuantumSecure   Boolean  @default(true)
  quantumToken      String?  // 🔒 QUANTUM ENCRYPTED
  biometricVerified Boolean  @default(false)
  twoFactorVerified Boolean  @default(false)
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId         String?
  booking           Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastActivityAt    DateTime @default(now())
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([userId])
  @@index([bookingId])
  @@index([token])
  @@index([refreshToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_sessions")
}

// 🔒 QUANTUM SECURITY EVENT MODEL: Security event tracking
model SecurityEvent {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM EVENT: Event details
  type              SecurityEventType
  severity          SecuritySeverity
  description       String
  metadata          Json?
  
  // 🔒 QUANTUM THREAT: Threat information
  threatLevel       ThreatLevel @default(LOW)
  isResolved        Boolean  @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  
  // 🔒 QUANTUM LOCATION: Location information
  ipAddress         String?
  userAgent         String?
  location          String?
  coordinates       Coordinates?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([userId])
  @@index([type])
  @@index([severity])
  @@index([threatLevel])
  @@index([isResolved])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_security_events")
}

// 📧 QUANTUM NOTIFICATION MODEL: Notification management
model Notification {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM NOTIFICATION: Notification details
  type              NotificationType
  title             String
  message           String
  data              Json?
  
  // 🔒 QUANTUM DELIVERY: Delivery information
  isRead            Boolean  @default(false)
  isDelivered       Boolean  @default(false)
  deliveredAt       DateTime?
  readAt            DateTime?
  
  // 🔒 QUANTUM CHANNELS: Delivery channels
  emailSent         Boolean  @default(false)
  pushSent          Boolean  @default(false)
  smsSent           Boolean  @default(false)
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([isDelivered])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_notifications")
}

// 💬 QUANTUM MESSAGE MODEL: Messaging system
model Message {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM MESSAGE: Message details
  content           String
  type              MessageType @default(TEXT)
  attachments       String[] // 🔒 QUANTUM ENCRYPTED URLs
  
  // 🔒 QUANTUM DELIVERY: Delivery information
  isRead            Boolean  @default(false)
  isDelivered       Boolean  @default(false)
  deliveredAt       DateTime?
  readAt            DateTime?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  senderId          String
  sender             User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiverId        String
  receiver           User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([isDelivered])
  @@index([createdAt])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_messages")
}

// 🔒 QUANTUM ADDRESS MODEL: Address information
model Address {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM ADDRESS: Address details
  street            String
  city              String
  state             String
  zipCode           String
  country           String   @default("US")
  coordinates       Coordinates?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_addresses")
}

// 🔒 QUANTUM EMERGENCY CONTACT MODEL: Emergency contact information
model EmergencyContact {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM CONTACT: Contact details
  name              String
  phone             String
  email             String?
  relationship      String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_emergency_contacts")
}

// 🔒 QUANTUM USER PREFERENCES MODEL: User preferences
model UserPreferences {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM PREFERENCES: Preference details
  language          String   @default("en")
  timezone          String   @default("UTC")
  currency          String   @default("USD")
  notifications     NotificationPreferences?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_user_preferences")
}

// 🔒 QUANTUM HEALTH INFO MODEL: Pet health information
model HealthInfo {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM HEALTH: Health details
  spayedNeutered    Boolean?
  microchipped      Boolean?
  microchipNumber   String?
  vetName           String?
  vetPhone          String?
  vetAddress        String?
  lastCheckup       DateTime?
  nextCheckup       DateTime?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  petId             String   @unique
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_health_info")
}

// 🔒 QUANTUM VACCINATION MODEL: Pet vaccination records
model Vaccination {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM VACCINATION: Vaccination details
  name              String
  dateGiven         DateTime
  nextDueDate       DateTime?
  veterinarian      String?
  notes             String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  petId             String
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([petId])
  @@index([dateGiven])
  @@index([nextDueDate])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_vaccinations")
}

// 🔒 QUANTUM BEHAVIOR INFO MODEL: Pet behavior information
model BehaviorInfo {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM BEHAVIOR: Behavior details
  isGoodWithDogs    Boolean?
  isGoodWithCats    Boolean?
  isGoodWithKids    Boolean?
  isGoodWithStrangers Boolean?
  isHouseTrained    Boolean?
  isCrateTrained    Boolean?
  isLeashTrained    Boolean?
  energyLevel       EnergyLevel?
  barkingLevel      BarkingLevel?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  petId             String   @unique
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_behavior_info")
}

// 🔒 QUANTUM LOCATION MODEL: Location information
model Location {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM LOCATION: Location details
  address           String
  city              String
  state             String
  zipCode           String
  country           String   @default("US")
  coordinates       Coordinates?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  bookingId         String   @unique
  booking           Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_locations")
}

// 🔒 QUANTUM DEVICE INFO MODEL: Device information
model DeviceInfo {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM DEVICE: Device details
  deviceId          String
  deviceType        String
  deviceModel       String?
  osVersion         String?
  appVersion        String?
  pushToken         String?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  sessionId         String   @unique
  session           Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_device_info")
}

// 🔒 QUANTUM NOTIFICATION PREFERENCES MODEL: Notification preferences
model NotificationPreferences {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM NOTIFICATIONS: Notification settings
  emailEnabled      Boolean  @default(true)
  pushEnabled       Boolean  @default(true)
  smsEnabled        Boolean  @default(false)
  
  // 🔒 QUANTUM TYPES: Notification types
  bookingUpdates    Boolean  @default(true)
  messages          Boolean  @default(true)
  reviews           Boolean  @default(true)
  payments          Boolean  @default(true)
  promotions        Boolean  @default(true)
  security          Boolean  @default(true)
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  userPreferencesId String   @unique
  userPreferences   UserPreferences @relation(fields: [userPreferencesId], references: [id], onDelete: Cascade)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_notification_preferences")
}

// 🔒 QUANTUM COORDINATES MODEL: Geographic coordinates
model Coordinates {
  id                String   @id @default(cuid())
  
  // 🔒 QUANTUM COORDINATES: Coordinate details
  latitude          Float
  longitude         Float
  accuracy          Float?
  
  // 🔒 QUANTUM RELATIONSHIPS: Database relationships
  addressId         String?  @unique
  address           Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)
  locationId        String?  @unique
  location          Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  securityEventId   String?  @unique
  securityEvent     SecurityEvent? @relation(fields: [securityEventId], references: [id], onDelete: SetNull)
  
  // 🔒 QUANTUM TIMESTAMPS: Audit timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 🔒 QUANTUM INDEXES: Performance indexes
  @@index([latitude])
  @@index([longitude])
  
  // 🔒 QUANTUM MAP: Map to database table
  @@map("quantum_coordinates")
}

// 🔒 QUANTUM ENUMS: Enum definitions

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserRole {
  USER
  SITTER
  ADMIN
  MODERATOR
  SUPPORT
}

enum VerificationLevel {
  BASIC
  ENHANCED
  PREMIUM
  VERIFIED
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  RABBIT
  HAMSTER
  GUINEA_PIG
  FERRET
  REPTILE
  OTHER
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum TrainingLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EnergyLevel {
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

enum BarkingLevel {
  QUIET
  MODERATE
  FREQUENT
  EXCESSIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CRYPTO
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SECURITY_ALERT
  SYSTEM_UPDATE
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PHONE_CHANGE
  PROFILE_UPDATE
  PAYMENT_ATTEMPT
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SUSPICIOUS_ACTIVITY
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  BIOMETRIC_ENABLED
  BIOMETRIC_DISABLED
  QUANTUM_TOKEN_GENERATED
  QUANTUM_TOKEN_REVOKED
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThreatLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Service {
  PET_SITTING
  DOG_WALKING
  HOUSE_SITTING
  PET_GROOMING
  PET_TRAINING
  VET_TRANSPORT
  PET_PHOTOGRAPHY
  EMERGENCY_CARE
  OVERNIGHT_STAY
  DAY_CARE
}

enum Permission {
  READ_USERS
  WRITE_USERS
  DELETE_USERS
  READ_PETS
  WRITE_PETS
  DELETE_PETS
  READ_BOOKINGS
  WRITE_BOOKINGS
  DELETE_BOOKINGS
  READ_PAYMENTS
  WRITE_PAYMENTS
  DELETE_PAYMENTS
  READ_REVIEWS
  WRITE_REVIEWS
  DELETE_REVIEWS
  READ_SESSIONS
  WRITE_SESSIONS
  DELETE_SESSIONS
  READ_SECURITY_EVENTS
  WRITE_SECURITY_EVENTS
  DELETE_SECURITY_EVENTS
  READ_NOTIFICATIONS
  WRITE_NOTIFICATIONS
  DELETE_NOTIFICATIONS
  READ_MESSAGES
  WRITE_MESSAGES
  DELETE_MESSAGES
  MODERATE_CONTENT
  MANAGE_SYSTEM
  VIEW_ANALYTICS
  MANAGE_USERS
  MANAGE_PAYMENTS
  MANAGE_SECURITY
}

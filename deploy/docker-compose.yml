# üöÄ QUANTUM-GRADE DOCKER COMPOSE
# üîí MILITARY-GRADE SECURITY + QUANTUM-ENHANCED INFRASTRUCTURE
# üìà QUANTUM-INFINITE SCALABILITY
# üöÄ QUANTUM-OPTIMIZED PERFORMANCE

version: '3.8'

services:
  # üåê QUANTUM LOAD BALANCER
  quantum-nginx:
    image: quantum-nginx:latest
    container_name: quantum-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./quantum-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./quantum-ssl:/etc/nginx/ssl:ro
      - ./quantum-logs/nginx:/var/log/nginx
    environment:
      - QUANTUM_SECURITY_LEVEL=military-grade
      - QUANTUM_ENCRYPTION=post-quantum
    depends_on:
      - quantum-api-gateway
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # üîß QUANTUM API GATEWAY
  quantum-api-gateway:
    build: 
      context: ./quantum-api-gateway
      dockerfile: Dockerfile.quantum
    container_name: quantum-api-gateway
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_REDIS_URL=redis://quantum-redis:6379
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - QUANTUM_SECURITY_KEY=${QUANTUM_SECURITY_KEY}
      - QUANTUM_ENCRYPTION_ALGORITHM=CRYSTALS-Kyber
      - QUANTUM_KEY_DISTRIBUTION=BB84
    depends_on:
      - quantum-redis
      - quantum-auth-service
      - quantum-user-service
      - quantum-booking-service
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üîê QUANTUM AUTHENTICATION SERVICE
  quantum-auth-service:
    build: 
      context: ./quantum-auth-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-auth-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - QUANTUM_REDIS_URL=redis://quantum-redis:6379
      - QUANTUM_JWT_SECRET=${QUANTUM_JWT_SECRET}
      - QUANTUM_QKD_ENABLED=true
      - QUANTUM_POST_QUANTUM_CRYPTO=true
      - QUANTUM_RANDOM_GENERATOR=quantum-entanglement
    depends_on:
      - quantum-postgres
      - quantum-redis
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üë• QUANTUM USER SERVICE
  quantum-user-service:
    build: 
      context: ./quantum-user-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-user-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - QUANTUM_REDIS_URL=redis://quantum-redis:6379
      - QUANTUM_VERIFICATION_ENABLED=true
      - QUANTUM_BIOMETRIC_AUTH=true
    depends_on:
      - quantum-postgres
      - quantum-redis
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üìÖ QUANTUM BOOKING SERVICE
  quantum-booking-service:
    build: 
      context: ./quantum-booking-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-booking-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - QUANTUM_REDIS_URL=redis://quantum-redis:6379
      - QUANTUM_SCHEDULING_ALGORITHM=quantum-optimized
      - QUANTUM_CONFLICT_DETECTION=true
    depends_on:
      - quantum-postgres
      - quantum-redis
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üí≥ QUANTUM PAYMENT SERVICE
  quantum-payment-service:
    build: 
      context: ./quantum-payment-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-payment-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - QUANTUM_ENCRYPTION_ENABLED=true
      - QUANTUM_ESCROW_SYSTEM=true
    depends_on:
      - quantum-postgres
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üí¨ QUANTUM MESSAGING SERVICE
  quantum-messaging-service:
    build: 
      context: ./quantum-messaging-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-messaging-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_REDIS_URL=redis://quantum-redis:6379
      - QUANTUM_WEBSOCKET_ENCRYPTION=true
      - QUANTUM_MESSAGE_PERSISTENCE=true
    depends_on:
      - quantum-redis
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üìä QUANTUM ANALYTICS SERVICE
  quantum-analytics-service:
    build: 
      context: ./quantum-analytics-service
      dockerfile: Dockerfile.quantum
    container_name: quantum-analytics-service
    environment:
      - NODE_ENV=quantum-production
      - QUANTUM_DATABASE_URL=${QUANTUM_DATABASE_URL}
      - QUANTUM_ML_ENABLED=true
      - QUANTUM_PREDICTIVE_ANALYTICS=true
    depends_on:
      - quantum-postgres
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # üóÑÔ∏è QUANTUM DATABASE
  quantum-postgres:
    image: quantum-postgres:15
    container_name: quantum-postgres
    environment:
      - POSTGRES_DB=quantum_pawfectsitters
      - POSTGRES_USER=${QUANTUM_DB_USER}
      - POSTGRES_PASSWORD=${QUANTUM_DB_PASSWORD}
      - QUANTUM_ENCRYPTION_ENABLED=true
      - QUANTUM_BACKUP_ENABLED=true
    volumes:
      - quantum_postgres_data:/var/lib/postgresql/data
      - ./quantum-backups:/backups
      - ./quantum-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G

  # üîÑ QUANTUM CACHE
  quantum-redis:
    image: quantum-redis:7-alpine
    container_name: quantum-redis
    command: quantum-redis-server --appendonly yes --requirepass ${QUANTUM_REDIS_PASSWORD}
    volumes:
      - quantum_redis_data:/data
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # üîç QUANTUM SEARCH
  quantum-elasticsearch:
    image: quantum-elasticsearch:8.8.0
    container_name: quantum-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${QUANTUM_ELASTIC_PASSWORD}
      - QUANTUM_ENCRYPTION_ENABLED=true
    volumes:
      - quantum_elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # üì® QUANTUM MESSAGE QUEUE
  quantum-rabbitmq:
    image: quantum-rabbitmq:3-management
    container_name: quantum-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${QUANTUM_RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${QUANTUM_RABBITMQ_PASS}
      - QUANTUM_ENCRYPTION_ENABLED=true
    volumes:
      - quantum_rabbitmq_data:/var/lib/rabbitmq
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üìä QUANTUM MONITORING - PROMETHEUS
  quantum-prometheus:
    image: quantum-prometheus:latest
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./quantum-monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - quantum_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--quantum.monitoring.enabled=true'
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üìà QUANTUM MONITORING - GRAFANA
  quantum-grafana:
    image: quantum-grafana:latest
    container_name: quantum-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${QUANTUM_GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - QUANTUM_DASHBOARDS_ENABLED=true
    volumes:
      - quantum_grafana_data:/var/lib/grafana
      - ./quantum-monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # üîí QUANTUM SECURITY SCANNER
  quantum-security-scanner:
    image: quantum-security-scanner:latest
    container_name: quantum-security-scanner
    environment:
      - QUANTUM_SCAN_INTERVAL=3600
      - QUANTUM_THREAT_DETECTION=true
      - QUANTUM_VULNERABILITY_SCANNING=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # üìù QUANTUM LOG AGGREGATOR
  quantum-log-aggregator:
    image: quantum-log-aggregator:latest
    container_name: quantum-log-aggregator
    environment:
      - QUANTUM_LOG_ENCRYPTION=true
      - QUANTUM_LOG_ROTATION=7d
      - QUANTUM_LOG_COMPRESSION=true
    volumes:
      - ./quantum-logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: quantum-bridge

volumes:
  quantum_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/postgres
  quantum_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/redis
  quantum_elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/elasticsearch
  quantum_rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/rabbitmq
  quantum_prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/prometheus
  quantum_grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum/grafana

# ðŸ§  AI SERVICES DOCKER COMPOSE
# ðŸ”’ MILITARY-GRADE SECURITY + QUANTUM-ENHANCED AI INFRASTRUCTURE
# ðŸ“ˆ QUANTUM-INFINITE SCALABILITY FOR AI WORKLOADS
# ðŸš€ QUANTUM-OPTIMIZED AI PERFORMANCE

version: '3.8'

services:
  # ðŸ§  QUANTUM AI SERVICE
  quantum-ai-service:
    build: 
      context: ../ai
      dockerfile: Dockerfile.ai
    container_name: quantum-ai-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORFLOW_MODEL_PATH=/app/models/
      - LOG_LEVEL=info
      - MAX_CONCURRENT_REQUESTS=10
      - REQUEST_TIMEOUT=30000
      - CACHE_TTL=3600
      - CACHE_MAX_SIZE=1000
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60000
      - TRAINING_BATCH_SIZE=32
      - TRAINING_EPOCHS=100
      - VALIDATION_SPLIT=0.2
      - SENTIMENT_CONFIDENCE_THRESHOLD=0.7
      - SENTIMENT_BATCH_SIZE=5
      - TRUST_SCORE_WEIGHTS={"reviews":0.3,"completion_rate":0.2,"response_time":0.15,"verification":0.15,"experience":0.1,"ratings":0.1}
      - MATCHMAKING_WEIGHTS={"content_based":0.4,"collaborative":0.3,"ai_recommendations":0.3}
      - BOOKING_PREDICTION_HORIZON=7
      - MIN_BOOKING_DURATION=4
      - MAX_BOOKING_DURATION=12
      - QUANTUM_SECURITY_LEVEL=military-grade
      - QUANTUM_ENCRYPTION=post-quantum
    volumes:
      - ai-models:/app/models
      - ai-cache:/app/cache
      - ai-logs:/app/logs
    depends_on:
      - quantum-ai-redis
      - quantum-ai-postgres
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ðŸ§  QUANTUM AI WORKER
  quantum-ai-worker:
    build: 
      context: ../ai
      dockerfile: Dockerfile.ai-worker
    container_name: quantum-ai-worker
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORFLOW_MODEL_PATH=/app/models/
      - LOG_LEVEL=info
      - WORKER_CONCURRENCY=4
      - WORKER_TIMEOUT=300000
      - QUANTUM_SECURITY_LEVEL=military-grade
      - QUANTUM_ENCRYPTION=post-quantum
    volumes:
      - ai-models:/app/models
      - ai-cache:/app/cache
      - ai-logs:/app/logs
    depends_on:
      - quantum-ai-redis
      - quantum-ai-postgres
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ðŸ§  QUANTUM AI MODEL TRAINER
  quantum-ai-trainer:
    build: 
      context: ../ai
      dockerfile: Dockerfile.ai-trainer
    container_name: quantum-ai-trainer
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORFLOW_MODEL_PATH=/app/models/
      - LOG_LEVEL=info
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - TRAINING_BATCH_SIZE=32
      - TRAINING_EPOCHS=100
      - VALIDATION_SPLIT=0.2
      - QUANTUM_SECURITY_LEVEL=military-grade
      - QUANTUM_ENCRYPTION=post-quantum
    volumes:
      - ai-models:/app/models
      - ai-training-data:/app/training-data
      - ai-logs:/app/logs
    depends_on:
      - quantum-ai-redis
      - quantum-ai-postgres
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # ðŸ§  QUANTUM AI REDIS
  quantum-ai-redis:
    image: redis:7-alpine
    container_name: quantum-ai-redis
    command: redis-server --requirepass ${QUANTUM_AI_REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${QUANTUM_AI_REDIS_PASSWORD}
    volumes:
      - ai-redis-data:/data
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ðŸ§  QUANTUM AI POSTGRES
  quantum-ai-postgres:
    image: postgres:15-alpine
    container_name: quantum-ai-postgres
    environment:
      - POSTGRES_DB=quantum_ai
      - POSTGRES_USER=quantum_ai_user
      - POSTGRES_PASSWORD=${QUANTUM_AI_DB_PASSWORD}
    volumes:
      - ai-postgres-data:/var/lib/postgresql/data
      - ./ai-init.sql:/docker-entrypoint-initdb.d/ai-init.sql
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # ðŸ§  QUANTUM AI MONITORING
  quantum-ai-monitoring:
    build: 
      context: ./quantum-monitoring
      dockerfile: Dockerfile.ai-monitoring
    container_name: quantum-ai-monitoring
    ports:
      - "9091:9090"
    environment:
      - QUANTUM_AI_METRICS_ENABLED=true
      - QUANTUM_AI_ALERTING_ENABLED=true
      - QUANTUM_AI_DASHBOARD_ENABLED=true
    volumes:
      - ai-metrics:/prometheus
      - ./quantum-monitoring/ai-prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ðŸ§  QUANTUM AI LOAD BALANCER
  quantum-ai-nginx:
    image: nginx:alpine
    container_name: quantum-ai-nginx
    ports:
      - "3002:80"
    volumes:
      - ./quantum-ai-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./quantum-ssl:/etc/nginx/ssl:ro
    depends_on:
      - quantum-ai-service
    networks:
      - quantum-ai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  ai-models:
    driver: local
  ai-cache:
    driver: local
  ai-logs:
    driver: local
  ai-redis-data:
    driver: local
  ai-postgres-data:
    driver: local
  ai-training-data:
    driver: local
  ai-metrics:
    driver: local

networks:
  quantum-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
